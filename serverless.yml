service: distributed-streaming-service

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  memorySize: 128
  timeout: 3
  
plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization

functions:
  upload-video:
    handler: api/v1/upload-video.handler
    description: POST /api/v1/videos/upload
    events:
      - http:
          path: api/v1/videos/upload
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  create-video:
    handler: api/v1/create-video.handler
    description: POST /api/v1/videos
    events:
      - http:
          path: api/v1/videos
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-videos:
    handler: api/v1/get-videos.handler
    description: GET /api/v1/videos
    events:
      - http:
          path: api/v1/videos
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}  

  get-video:
    handler: api/v1/get-video.handler
    description: GET /api/v1/videos/{videoId}
    events:
      - http:
          path: api/v1/videos/{videoId}
          method: get
          request:
            parameters:
              paths:
                videoId: true
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-video:
    handler: api/v1/update-video.handler
    description: PUT /api/v1/videos/{videoId}
    events:
      - http:
          path: api/v1/videos/{videoId}
          method: put
          request:
            parameters:
              paths:
                videoId: true
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-video:
    handler: api/v1/delete-video.handler
    description: DELETE /api/v1/videos/{videoId}
    events:
      - http:
          path: api/v1/videos/{videoId}
          method: delete
          request:
            parameters:
              paths:
                videoId: true
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  search-video:
    handler: api/v1/search-video.handler
    description: POST /api/v1/videos/search
    events:
      - http:
          path: api/v1/videos/search
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  dbconnect-status:
    handler: api/v1/connect-db.handler
    description: POST /api/v1/dbconnect-status
    events:
      - http:
          path: api/v1/dbconnect-status
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
