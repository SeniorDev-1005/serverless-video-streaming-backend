{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "UploadDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-upload-video"
      }
    },
    "CreateDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-create-video"
      }
    },
    "GetDashvideosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-get-videos"
      }
    },
    "GetDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-get-video"
      }
    },
    "UpdateDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-update-video"
      }
    },
    "DeleteDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-delete-video"
      }
    },
    "SearchDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-search-video"
      }
    },
    "DbconnectDashstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/distributed-streaming-service-dev-dbconnect-status"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "distributed-streaming-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/distributed-streaming-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/distributed-streaming-service-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "distributed-streaming-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "UploadDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/upload-video.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-upload-video",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "POST /api/v1/videos/upload",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadDashvideoLogGroup"
      ]
    },
    "CreateDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/create-video.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-create-video",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "POST /api/v1/videos",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashvideoLogGroup"
      ]
    },
    "GetDashvideosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/get-videos.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-get-videos",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "GET /api/v1/videos",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashvideosLogGroup"
      ]
    },
    "GetDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/get-video.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-get-video",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "GET /api/v1/videos/{videoId}",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashvideoLogGroup"
      ]
    },
    "UpdateDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/update-video.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-update-video",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "PUT /api/v1/videos/{videoId}",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateDashvideoLogGroup"
      ]
    },
    "DeleteDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/delete-video.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-delete-video",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "DELETE /api/v1/videos/{videoId}",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteDashvideoLogGroup"
      ]
    },
    "SearchDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/search-video.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-search-video",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "POST /api/v1/videos/search",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SearchDashvideoLogGroup"
      ]
    },
    "DbconnectDashstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/distributed-streaming-service/dev/1659862611076-2022-08-07T08:56:51.076Z/distributed-streaming-service.zip"
        },
        "Handler": "api/v1/connect-db.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "distributed-streaming-service-dev-dbconnect-status",
        "MemorySize": 128,
        "Timeout": 3,
        "Description": "POST /api/v1/dbconnect-status",
        "Environment": {
          "Variables": {
            "DBHOST": "192.168.138.128",
            "DBUSER": "2local",
            "DBPASSWORD": "2local",
            "DBNAME": "distributed-streaming"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DbconnectDashstatusLogGroup"
      ]
    },
    "UploadDashvideoLambdaVersionRSqk8QkLxG536BzDYNggYdL4oSWv2kdfVeTZxDOVmE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadDashvideoLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "POST /api/v1/videos/upload"
      }
    },
    "CreateDashvideoLambdaVersionofCRn7pDs6XYYP8nDir0UbD91nxw8bRCK6Qux8cyFC4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashvideoLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "POST /api/v1/videos"
      }
    },
    "GetDashvideosLambdaVersionmm6Zw3mCqHzcuALWgvZzHrDTOSQcYGxzFvgW31XQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashvideosLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "GET /api/v1/videos"
      }
    },
    "GetDashvideoLambdaVersionsctqcch9mVVqnPpqnBkKl2BSgDaSTdTx6suTSTVvl0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashvideoLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "GET /api/v1/videos/{videoId}"
      }
    },
    "UpdateDashvideoLambdaVersion5FTGPuG1lQButaVRYslPabLPr63YdaREA285gLIR80c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashvideoLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "PUT /api/v1/videos/{videoId}"
      }
    },
    "DeleteDashvideoLambdaVersionBwTUmN4Tv0v6tKGvO0beLblHmdGXkf6fbFBFtxtU8dM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashvideoLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "DELETE /api/v1/videos/{videoId}"
      }
    },
    "SearchDashvideoLambdaVersionRoH9onQx9CFgWk9VvfeVBODAYCM8MWoEFSkQwBfym9w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SearchDashvideoLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "POST /api/v1/videos/search"
      }
    },
    "DbconnectDashstatusLambdaVersione8MEbF995VruQEoWH2GDXnoQhdvm2bBJaeVSQ1Dw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DbconnectDashstatusLambdaFunction"
        },
        "CodeSha256": "5JhBxA1+UUGbXW4G8MMNDzyoDLgBocYjaYcaceRoWx0=",
        "Description": "POST /api/v1/dbconnect-status"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-distributed-streaming-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiV1": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "v1",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiV1Videos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiV1"
        },
        "PathPart": "videos",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiV1VideosUpload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiV1Videos"
        },
        "PathPart": "upload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiV1VideosVideoidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiV1Videos"
        },
        "PathPart": "{videoId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiV1VideosSearch": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiV1Videos"
        },
        "PathPart": "search",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceApiV1DbconnectDashstatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApiV1"
        },
        "PathPart": "dbconnect-status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiV1VideosUploadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Accept,Content-Type,Content-Length,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiV1VideosOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Accept,Content-Type,Content-Length,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1Videos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiV1VideosVideoidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Accept,Content-Type,Content-Length,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiV1VideosSearchOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Accept,Content-Type,Content-Length,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosSearch"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiV1DbconnectDashstatusOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Accept,Content-Type,Content-Length,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1DbconnectDashstatus"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodApiV1VideosUploadGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadDashvideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadDashvideoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1VideosPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1Videos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashvideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateDashvideoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1VideosGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1Videos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashvideosLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashvideosLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1VideosVideoidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.videoId": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashvideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayDistributedstreamingserviceRequestValidator"
        }
      },
      "DependsOn": [
        "GetDashvideoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1VideosVideoidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {
          "method.request.path.videoId": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateDashvideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayDistributedstreamingserviceRequestValidator"
        }
      },
      "DependsOn": [
        "UpdateDashvideoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1VideosVideoidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {
          "method.request.path.videoId": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosVideoidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteDashvideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayDistributedstreamingserviceRequestValidator"
        }
      },
      "DependsOn": [
        "DeleteDashvideoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1VideosSearchPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1VideosSearch"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SearchDashvideoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SearchDashvideoLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiV1DbconnectDashstatusGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiV1DbconnectDashstatus"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DbconnectDashstatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DbconnectDashstatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDistributedstreamingserviceRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "distributed-streaming-service-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayDeployment1659862583482": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodApiV1VideosUploadOptions",
        "ApiGatewayMethodApiV1VideosOptions",
        "ApiGatewayMethodApiV1VideosVideoidVarOptions",
        "ApiGatewayMethodApiV1VideosSearchOptions",
        "ApiGatewayMethodApiV1DbconnectDashstatusOptions",
        "ApiGatewayMethodApiV1VideosUploadGet",
        "ApiGatewayMethodApiV1VideosPost",
        "ApiGatewayMethodApiV1VideosGet",
        "ApiGatewayMethodApiV1VideosVideoidVarGet",
        "ApiGatewayMethodApiV1VideosVideoidVarPut",
        "ApiGatewayMethodApiV1VideosVideoidVarDelete",
        "ApiGatewayMethodApiV1VideosSearchPost",
        "ApiGatewayMethodApiV1DbconnectDashstatusGet"
      ]
    },
    "UploadDashvideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadDashvideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashvideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashvideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashvideosLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashvideosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashvideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashvideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateDashvideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashvideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteDashvideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDashvideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SearchDashvideoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SearchDashvideoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DbconnectDashstatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DbconnectDashstatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "UploadDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadDashvideoLambdaVersionRSqk8QkLxG536BzDYNggYdL4oSWv2kdfVeTZxDOVmE"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-UploadDashvideoLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashvideoLambdaVersionofCRn7pDs6XYYP8nDir0UbD91nxw8bRCK6Qux8cyFC4"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-CreateDashvideoLambdaFunctionQualifiedArn"
      }
    },
    "GetDashvideosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashvideosLambdaVersionmm6Zw3mCqHzcuALWgvZzHrDTOSQcYGxzFvgW31XQ"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-GetDashvideosLambdaFunctionQualifiedArn"
      }
    },
    "GetDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashvideoLambdaVersionsctqcch9mVVqnPpqnBkKl2BSgDaSTdTx6suTSTVvl0"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-GetDashvideoLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashvideoLambdaVersion5FTGPuG1lQButaVRYslPabLPr63YdaREA285gLIR80c"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-UpdateDashvideoLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashvideoLambdaVersionBwTUmN4Tv0v6tKGvO0beLblHmdGXkf6fbFBFtxtU8dM"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-DeleteDashvideoLambdaFunctionQualifiedArn"
      }
    },
    "SearchDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SearchDashvideoLambdaVersionRoH9onQx9CFgWk9VvfeVBODAYCM8MWoEFSkQwBfym9w"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-SearchDashvideoLambdaFunctionQualifiedArn"
      }
    },
    "DbconnectDashstatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DbconnectDashstatusLambdaVersione8MEbF995VruQEoWH2GDXnoQhdvm2bBJaeVSQ1Dw"
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-DbconnectDashstatusLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-distributed-streaming-service-dev-ServiceEndpoint"
      }
    }
  }
}